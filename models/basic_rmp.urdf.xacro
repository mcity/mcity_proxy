<?xml version="1.0" ?>
<robot name="rmp_401" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- ****************** ROBOT CONSTANTS *******************************  -->
  <!-- Define the size of the robot's main chassis in meters -->
  <xacro:property name="base_width" value=".432"/>
  <xacro:property name="base_length" value=".635"/>
  <xacro:property name="base_height" value=".204"/>
  <!-- Define the shape of the robot's wheels in meters -->
  <xacro:property name="wheel_radius" value="0.1075"/>
  <xacro:property name="wheel_width" value="0.085"/>

  <!-- x-axis points forward, y-axis points to left, z-axis points upwards -->
  <!-- Define the gap between the wheel and chassis along y-axis in meters -->
  <xacro:property name="wheel_ygap" value="0.035"/>

  <!-- Position the wheels along the z-axis -->
  <xacro:property name="wheel_zoff" value="0.05"/>

  <!-- Position the wheels along the x-axis -->
  <xacro:property name="wheel_xoff" value="0.221"/>

  <!-- Position the caster wheel along the x-axis -->
  <xacro:property name="caster_xoff" value="0.217"/>

  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d xyz rpy">
    <inertial>
      <origin xyz="${xyz}" rpy="${rpy}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h xyz rpy">
    <inertial>
      <origin xyz="${xyz}" rpy="${rpy}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <!-- <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro> -->
  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->
  <link name="base_footprint"/>

  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link" />
    <origin xyz="0.0 0.0 ${(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>

  <!-- ********************** ROBOT BASE *********************************  -->
  <link name="base_link">
    <visual>
      <origin xyz="-.3450 .355 -.200" rpy="${pi/2} 0 -${pi/2}"/>
      <geometry>
        <mesh filename="file://$(find mcity_proxy)/meshes/chassis.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="Red">
        <color rgba="${255/255} ${0/255} ${0/255} 1.0"/>
      </material>
    </visual>

    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="20.0" w="${base_length}" d="${base_width}" h="${base_height}" xyz="0 0 0" rpy="${pi/2} 0 -${pi/2}"/>

  </link>

  <gazebo reference="base_link">
    <material>Gazebo/Red</material>
  </gazebo>

  <!-- ********************** STEER ARM  *********************************  -->
  <link name="front_steer_link">
    <visual>
      <origin xyz="-.5650 .355 -.200" rpy="1.5707963267949 0 -${pi/2}"/>
      <geometry>
        <mesh filename="file://$(find mcity_proxy)/meshes/steering_arm.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="Green">
        <color rgba="${0/255} ${255/255} ${0/255} 1.0"/>
      </material>
    </visual>

    <xacro:box_inertia m="5.0" w=".46" d=".09" h=".20" xyz="0 0 0" rpy="0 0 0"/>

  </link>
  <joint name="steer_joint" type="revolute">
    <parent link="base_link"/>
    <child link="front_steer_link"/>
    <origin xyz="0.22 0 0" rpy="0 0 0"/>
    <limit upper="0.36" lower="-0.36" effort="1" velocity="5.0"/>
    <joint_properties damping="1.0" friction="1.0"/>
    <axis xyz="0 0 1"/>
  </joint>

  <gazebo reference="front_steer_link">
    <material>Gazebo/Green</material>
  </gazebo>

  <!-- *********************** FRONT WHEELS ******************************  -->

  <xacro:macro name="front_wheel" params="prefix x_offset offset_multiplier z_rotate">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="-.5650 ${.355 - offset_multiplier * x_offset} -.110" rpy="1.5707963267949 0 -${pi/2}"/>
        <geometry>
          <mesh filename="file://$(find mcity_proxy)/meshes/front_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="White">
          <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 .048 0" rpy="0 ${pi/2} ${-pi/2}"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="1" r="${wheel_radius}" h="${wheel_width}" xyz=".048 0 0" rpy="0 ${pi/2} ${-pi/2}"/>

    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="front_steer_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="0 ${-x_offset} -.09" rpy="0 0 ${z_rotate}"/>
      <axis xyz="0 ${-offset_multiplier} 0"/>
      <joint_properties damping="1.0" friction="1.0"/>
    </joint>
    <gazebo reference="${prefix}_link">
      <material>Gazebo/White</material>
      <collision>
        <friction>
          <mu1>1.4</mu1>
          <mu2>1.4</mu2>
          <fdir1>1 0 0</fdir1>
          <kp>1000000.0</kp>
          <kd>100.0</kd>
          <minDepth>0.01</minDepth>
          <maxContacts>1</maxContacts>
          <slip1>1.0</slip1>
          <slip2>0.0</slip2>
        </friction>
      </collision>
    </gazebo>
  </xacro:macro>

  <xacro:front_wheel prefix="frontwhl_r" x_offset=".22" offset_multiplier="-1" z_rotate="0"/>
  <xacro:front_wheel prefix="frontwhl_l" x_offset="-.22" offset_multiplier="1" z_rotate="${pi}"/>

  <!-- ***********************  BACK WHEELS ******************************  -->

  <xacro:macro name="back_wheel" params="prefix x_offset offset_multiplier z_rotate">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="-.1100 ${.355 - offset_multiplier * x_offset} -.110" rpy="1.5707963267949 0 -${pi/2}"/>
        <geometry>
          <mesh filename="file://$(find mcity_proxy)/meshes/back_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="White">
          <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 .029 0" rpy="0 ${pi/2} -${pi/2}"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="1" r="${wheel_radius}" h="${wheel_width}" xyz=".029 0 0" rpy="0 ${pi/2} ${-pi/2}"/>

    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="-.235 ${-x_offset} -.09" rpy="0 0 ${z_rotate}"/>
      <axis xyz="0 ${-offset_multiplier} 0"/>
      <joint_properties damping="1.0" friction="1.0"/>
    </joint>
    <gazebo reference="${prefix}_link">
      <material>Gazebo/White</material>
      <collision>
        <friction>
          <mu1>1.4</mu1>
          <mu2>1.4</mu2>
          <fdir1>1 0 0</fdir1>
          <kp>1000000.0</kp>
          <kd>100.0</kd>
          <minDepth>0.01</minDepth>
          <maxContacts>1</maxContacts>
          <slip1>1.0</slip1>
          <slip2>0.0</slip2>
        </friction>
      </collision>
    </gazebo>
  </xacro:macro>

  <xacro:back_wheel prefix="backwhl_r" x_offset=".24" offset_multiplier="-1" z_rotate="0"/>
  <xacro:back_wheel prefix="backwhl_l" x_offset="-.24" offset_multiplier="1" z_rotate="3.14159265359"/>

  <!-- *********************** GPS SETUP **********************************  -->
  <link name="gps">
    <visual>
      <geometry>
        <box size=".05 .042 .001"/>
      </geometry>
      <material name="Blue">
        <color rgba="${0/255} ${0/255} ${255/255} 1.0"/>
      </material>
    </visual>
    <xacro:box_inertia m="0.1" w=".05" d=".042" h=".001" xyz="0 0 0" rpy="0 0 0"/>
  </link>
  <joint name="gps_joint" type="fixed">
    <parent link="base_link"/>
    <child link="gps"/>
    <origin xyz="-.117 0.01 0.08" rpy="0 0 0"/>
  </joint>
  <gazebo reference="gps">
    <material>Gazebo/Blue</material>
    <sensor name="rmp_gps" type="gps">
      <always_on>true</always_on>
      <update_rate>10.0</update_rate>
      <gps>
        <position_sensing>
          <horizontal>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1e-2</stddev>
            </noise>
          </horizontal>
          <vertical>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1</stddev>
            </noise>
          </vertical>
        </position_sensing>
      </gps>
      <plugin name="rmp_gps_plugin" filename="libgazebo_ros_gps_sensor.so">
        <ros>
          <remapping>~/out:=fix</remapping>
        </ros>
      </plugin>
    </sensor>
  </gazebo>

  <!-- *********************** IMU SETUP *********************************  -->
  <!-- Each sensor must be attached to a link.                              -->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size=".05 .042 .001"/>
      </geometry>
      <material name="Blue">
        <color rgba="${0/255} ${0/255} ${255/255} 1.0"/>
      </material>
    </visual>
    <xacro:box_inertia m="0.1" w=".05" d=".042" h=".001" xyz="0 0 0" rpy="0 0 0"/>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0.01"/>
  </joint>

  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="twr_imu" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <orientation>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </z>
        </orientation>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
      <plugin name="rmp_imu" filename="libgazebo_ros_imu_sensor.so">
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        <frame_name>imu_link</frame_name>
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=imu/data</remapping>
        </ros>
      </plugin>
    </sensor>
  </gazebo>

  <!-- *********************** ZED 2i SENSOR  ***************************    -->
  <link name="camera_link">
    <visual>
      <geometry>
        <mesh filename="file://$(find mcity_proxy)/meshes/zed_2i.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="Blue">
        <color rgba="${0/255} ${0/255} ${255/255} 1.0"/>
      </material>
      <origin xyz="-0.05 .01 0" rpy="0 0 ${pi/2}"/>
    </visual>
    <xacro:box_inertia m="0.224" w=".175" d=".3" h=".43" xyz="0 0 0" rpy="0 0 0"/>
  </link>

  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="0.3 0 0.095" rpy="0 0 0"/>
  </joint>
  <joint name="camera_optical_joint" type="fixed">
    <!-- these values have to be these values otherwise the gazebo camera
        image won't be aligned properly with the frame it is supposedly
        originating from -->
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    <parent link="camera_link"/>
    <child link="camera_link_optical"/>
  </joint>

  <link name="camera_link_optical">
    <xacro:box_inertia m="0.01" w=".01" d=".01" h=".01" xyz="0 0 0" rpy="0 0 0"/>
  </link>

  <gazebo reference="camera_link">
    <sensor type="depth" name="zed_2i">
        <!-- Set always_on only sensor, not on plugin -->
        <always_on>1</always_on>

        <!-- Set update_rate only sensor, not on plugin -->
        <update_rate>1</update_rate>

        <visualize>true</visualize>

        <camera name="zed_2i">
          <distortion>
            <!-- TODO Fix distortion params -->
            <k1>0.1</k1>
            <k2>0.2</k2>
            <k3>0.3</k3>
            <p1>0.4</p1>
            <p2>0.5</p2>
            <center>0.5 0.5</center>
          </distortion>
          <horizontal_fov>1.26</horizontal_fov>
            <image>
              <width>1920</width>
              <height>1080</height>
              <format>B8G8R8</format>
            </image>
            <depth_camera>
            </depth_camera>
            <clip>
              <near>0.02</near>
              <far>300</far>
            </clip>
            <noise>
              <type>gaussian</type>
              <!-- Noise is sampled independently per pixel on each frame.
                   That pixel's noise value is added to each of its color
                   channels, which at that point lie in the range [0,1]. -->
              <mean>0.0</mean>
              <stddev>0.007</stddev>
            </noise>
        </camera>

        <plugin name="zed_2i_depth_camera" filename="libgazebo_ros_camera.so">
          <!-- Change namespace, camera name and topics so -
                * Raw images are published to /custom_ns/custom_camera/custom_image
                * Depth images are published to /custom_ns/custom_camera/custom_image_depth
                * Raw image camera info is published to /custom_ns/custom_camera/custom_info_raw
                * Depth image camera info is published to /custom_ns/custom_camera/custom_info_depth
                * Point cloud is published to /custom_ns/custom_camera/custom_points
          -->
          <ros>
            <namespace>/</namespace>
            <!-- <remapping>depth_cam/image_raw:=custom_camera/custom_image</remapping>
            <remapping>depth_cam/image_depth:=custom_camera/custom_image_depth</remapping>
            <remapping>depth_cam/camera_info:=custom_camera/custom_info_raw</remapping>
            <remapping>depth_cam/camera_info_depth:=custom_camera/custom_info_depth</remapping>
            <remapping>depth_cam/points:=custom_camera/custom_points</remapping> -->
          </ros>

          <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
          <camera_name>zed_2i</camera_name>

          <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
          <frame_name>camera_link_optical</frame_name>

          <hack_baseline>0.12</hack_baseline>

          <!-- No need to repeat distortion parameters or to set autoDistortion -->

          <min_depth>1.5</min_depth>
          <max_depth>35</max_depth>
      </plugin>
    </sensor>

  </gazebo>


  <!-- *********************** WHEEL ODOMETRY ***************************    -->
  <gazebo>
    <plugin name="rmp_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <!-- Set namespace -->
        <namespace>/</namespace>
        <!-- Remap default topics -->
        <remapping>odom:=odometry/wheel</remapping>
      </ros>

      <!-- Update rate -->
      <update_rate>500</update_rate>

      <!-- Number of wheel pairs -->
      <num_wheel_pairs>2</num_wheel_pairs>

      <!-- wheels0 -->
      <left_joint>frontwhl_l_joint</left_joint>
      <right_joint>frontwhl_r_joint</right_joint>

      <!-- wheels1-->
      <left_joint>backwhl_l_joint</left_joint>
      <right_joint>backwhl_r_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.55</wheel_separation>
      <wheel_separation>0.55</wheel_separation>

      <wheel_diameter>0.215</wheel_diameter>
      <wheel_diameter>0.215</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>1000</max_wheel_torque>
      <max_wheel_acceleration>10.0</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <!-- <publish_wheel_tf>true</publish_wheel_tf> -->

      <!-- <odometry_frame>odom_demo</odometry_frame> -->
      <robot_base_frame>base_footprint</robot_base_frame>

      <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
      <odometry_source>1</odometry_source>
      <odometry_topic>odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>

      <covariance_x>0.001</covariance_x> <!-- 0.0001 -->
      <covariance_y>0.001</covariance_y> <!-- 0.0001 -->
      <covariance_yaw>0.01</covariance_yaw> <!-- 0.01 -->
    </plugin>
  </gazebo>

  <!-- *********************** JOINT STATE PUBLISHER *********************   -->
  <gazebo>
    <plugin name="rmp_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>
      <joint_name>frontwhl_l_joint</joint_name>
      <joint_name>frontwhl_r_joint</joint_name>
      <joint_name>backwhl_l_joint</joint_name>
      <joint_name>backwhl_r_joint</joint_name>
      <joint_name>steer_joint</joint_name>
      </plugin>
  </gazebo>
</robot>
